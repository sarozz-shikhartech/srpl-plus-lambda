import boto3
import os
import sys
import uuid
from urllib.parse import unquote_plus
from PIL import Image
import PIL.Image

s3_client = boto3.client('s3')

def resize_image(image_path, resized_path, size):
    with Image.open(image_path) as image:
        if size == 'small':
            image.thumbnail((150, 150))
        elif size == 'medium':
            image.thumbnail((480, 640))
        elif size == 'large':
            image.thumbnail((720, 960))
        elif size == 'retina-small':
            image.thumbnail((300, 300))
        elif size == 'retina-medium':
            image.thumbnail((960, 1280))
        else:
            image.thumbnail((1440, 1920))
    
    image.save(resized_path)

def lambda_handler(event, context):
    sizes = ['large', 'medium', 'small', 'retina-large', 'retina-medium', 'retina-small']
    for record in event['Records']:
        for size in sizes:
            bucket = record['s3']['bucket']['name']
            key = unquote_plus(record['s3']['object']['key'])
            splitKey = key.split("/")
            storeName = splitKey[0]
            imageName = splitKey[2]
            tmpkey = key.replace('/', '')
            download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey)
            upload_path = '/tmp/resized-{}'.format(tmpkey)
            s3_client.download_file(bucket, key, download_path)
            resize_image(download_path, upload_path, size)
            s3_client.upload_file(upload_path, 'productsimage', '{}/{}/{}'.format(storeName, size,imageName))

# dummyEvent = {
#     "records": [{
#         "image": "1"
#     }]
# }  

# lambda_handler(dummyEvent, 0)